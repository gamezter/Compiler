$ 
prog 
prog -> progBody classDeclList #newGlobal 
Stack: $ progBody classDeclList #newGlobal 
classDeclList -> classDeclList classDecl 
Stack: $ progBody classDeclList classDecl 
classDecl -> #exit ; } classBody { #newClass id #pushId class 
Stack: $ progBody classDeclList #exit ; } classBody { #newClass id #pushId class 
class = class
id = Utility
{ = {
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId int 
int = int
id = var1
varOrFunc -> classBody ; #newVar arraySizeList 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList 
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 4
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 5
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 7
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 8
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 9
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 1
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 0
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar EPSILON 
; = ;
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> float 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId float 
float = float
id = var2
varOrFunc -> classBody ; #newVar arraySizeList 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList 
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar EPSILON 
; = ;
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId int 
int = int
id = findMax
varOrFunc -> funcDefList #exit ; funcBody ) fParams ( #newFunc 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc 
( = (
fParams -> fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId int 
int = int
id = array
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 100
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = maxValue
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } varOrStatement id #pushType 
id = maxValue
varOrStatement -> statementList ; expr assignOp variable1 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 100
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
for = for
( = (
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId int 
int = int
id = idx
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 inum 
inum = 99
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; EPSILON 
; = ;
relExpr -> arithExpr relOp arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp EPSILON 
relOp -> > 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr > 
> = >
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; EPSILON 
; = ;
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId indiceList id #pushId 
id = idx
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term addOp 
addOp -> - 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term - 
- = -
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) EPSILON 
) = )
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; statBlock else statBlock then ) expr ( if 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr ( if 
if = if
( = (
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 EPSILON 
expr1 -> arithExpr relOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr relOp 
relOp -> > 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr > 
> = >
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor1 id #pushId 
id = maxValue
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) EPSILON 
) = )
then = then
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = maxValue
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; EPSILON 
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } EPSILON 
} = }
else = else
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; } statementList { 
{ = {
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; } EPSILON 
} = }
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } EPSILON 
} = }
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; ) expr ( return 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr ( return 
return = return
( = (
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor1 id #pushId 
id = maxValue
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) EPSILON 
) = )
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> funcDefList funcDef 
Stack: $ progBody classDeclList #exit ; } funcDefList funcDef 
funcDef -> #exit ; funcBody funcHead 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody funcHead 
funcHead -> ) fParams ( #newFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId int 
int = int
id = findMin
( = (
fParams -> fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId int 
int = int
id = array
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 100
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = minValue
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } varOrStatement id #pushType 
id = minValue
varOrStatement -> statementList ; expr assignOp variable1 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 100
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
for = for
( = (
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId int 
int = int
id = idx
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; EPSILON 
; = ;
relExpr -> arithExpr relOp arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp EPSILON 
relOp -> <= 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr <= 
<= = <=
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 inum 
inum = 99
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) assignStat ; EPSILON 
; = ;
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId indiceList id #pushId 
id = idx
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> ) arithExpr ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock ) EPSILON 
) = )
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; statBlock else statBlock then ) expr ( if 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr ( if 
if = if
( = (
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) expr1 EPSILON 
expr1 -> arithExpr relOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr relOp 
relOp -> < 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr < 
< = <
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor1 id #pushId 
id = minValue
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else statBlock then ) EPSILON 
) = )
then = then
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = minValue
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = array
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = idx
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } statementList ; EPSILON 
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; statBlock else } EPSILON 
} = }
else = else
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; } statementList { 
{ = {
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; } EPSILON 
} = }
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } EPSILON 
} = }
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; ) expr ( return 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr ( return 
return = return
( = (
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor1 id #pushId 
id = minValue
factor1 -> factor2 #checkId indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; ) EPSILON 
) = )
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } EPSILON 
} = }
; = ;
classDeclList -> EPSILON 
Stack: $ progBody EPSILON 
progBody -> funcDefList #exit ; funcBody #newProg program 
Stack: $ funcDefList #exit ; funcBody #newProg program 
program = program
funcBody -> } funcBlock { 
Stack: $ funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = sample
arraySizeList -> arraySizeList arraySize 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 100
] = ]
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = idx
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = maxValue
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = minValue
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ funcDefList #exit ; } varOrStatement id #pushType 
id = Utility
varOrStatement -> funcBlock ; #newVar arraySizeList id #pushId 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId 
id = utility
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ funcDefList #exit ; } varOrStatement id #pushType 
id = Utility
varOrStatement -> funcBlock ; #newVar arraySizeList id #pushId 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId 
id = arrayUtility
arraySizeList -> arraySizeList arraySize 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 2
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 3
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 6
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 7
] = ]
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId type #pushType ( for 
for = for
( = (
type -> int 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr assignOp #newVar id #pushId int 
int = int
id = t
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; relExpr ; EPSILON 
; = ;
relExpr -> arithExpr relOp arithExpr 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor1 id #pushId 
id = t
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr relOp EPSILON 
relOp -> <= 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr <= 
<= = <=
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 term1 inum 
inum = 100
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) assignStat ; EPSILON 
; = ;
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId indiceList id #pushId 
id = t
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor1 id #pushId 
id = t
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; statBlock ) EPSILON 
) = )
statBlock -> } statementList { 
Stack: $ funcDefList #exit ; } statementList ; } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; ) variable ( get 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable ( get 
get = get
( = (
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList id #pushId 
id = sample
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = t
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; ) #currentScope #exitScope EPSILON 
) = )
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = sample
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = t
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> ) arithExpr ( 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor1 id #pushId 
id = sample
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor1 id #pushId 
id = t
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> term1 factor multOp 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor * 
* = *
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor1 id #pushId 
id = randomize
factor1 -> #checkFunc ) #exitScope aParams #currentScope ( 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 #checkFunc ) #exitScope aParams #currentScope ( 
( = (
aParams -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 #checkFunc ) #exitScope EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } statementList ; EPSILON 
; = ;
statementList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; } EPSILON 
} = }
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = maxValue
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = utility
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> factor1 id #pushId . 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId . 
. = .
id = findMax
factor1 -> #checkFunc ) #exitScope aParams #currentScope ( 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParams #currentScope ( 
( = (
aParams -> aParamsTailList #addShallowParam expr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr 
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor1 id #pushId 
id = sample
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam EPSILON 
aParamsTailList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = minValue
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId 
id = utility
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> factor1 id #pushId . 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id #pushId . 
. = .
id = findMin
factor1 -> #checkFunc ) #exitScope aParams #currentScope ( 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParams #currentScope ( 
( = (
aParams -> aParamsTailList #addShallowParam expr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr 
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor1 id #pushId 
id = sample
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope aParamsTailList #addShallowParam EPSILON 
aParamsTailList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 #checkFunc ) #exitScope EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = utility
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> variable1 #checkId indiceList id #pushId . 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId . 
. = .
id = var1
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 4
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 inum 
inum = 10
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = arrayUtility
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> variable1 #checkId indiceList id #pushId . 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId . 
. = .
id = var1
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 4
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList indice 
indice -> ] #addShallowDimension arithExpr [ 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 term1 inum 
inum = 0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList ] #addShallowDimension EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; ) expr ( put 
Stack: $ funcDefList #exit ; } statementList ; ) expr ( put 
put = put
( = (
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor1 id #pushId 
id = maxValue
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) EPSILON 
) = )
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; ) expr ( put 
Stack: $ funcDefList #exit ; } statementList ; ) expr ( put 
put = put
( = (
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor1 id #pushId 
id = minValue
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) EPSILON 
) = )
; = ;
statementList -> EPSILON 
Stack: $ funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> funcDefList funcDef 
Stack: $ funcDefList funcDef 
funcDef -> #exit ; funcBody funcHead 
Stack: $ funcDefList #exit ; funcBody funcHead 
funcHead -> ) fParams ( #newFunc id #pushId type #pushType 
Stack: $ funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId type #pushType 
type -> float 
Stack: $ funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId float 
float = float
id = randomize
( = (
fParams -> EPSILON 
Stack: $ funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId float #pushType 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId float #pushType 
float = float
id = value
arraySizeList -> EPSILON 
Stack: $ funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ funcDefList #exit ; } varOrStatement id #pushType 
id = value
varOrStatement -> statementList ; expr assignOp variable1 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 inum 
inum = 100
term1 -> term1 factor multOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor * 
* = *
factor -> ) arithExpr ( 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> inum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term addOp 
addOp -> + 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 fnum 
fnum = 3.0
term1 -> term1 factor multOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor multOp 
multOp -> / 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor / 
/ = /
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 fnum 
fnum = 7.0006
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 #checkId indiceList id #pushId 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId indiceList id #pushId 
id = value
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp variable1 #checkId EPSILON 
variable1 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr assignOp #currentScope #exitScope EPSILON 
assignOp -> = 
Stack: $ funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 fnum 
fnum = 1.05
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> ) arithExpr ( 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> ) arithExpr ( 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term1 fnum 
fnum = 2.04
term1 -> term1 factor multOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term1 factor * 
* = *
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 term1 fnum 
fnum = 2.47
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term addOp 
addOp -> - 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term - 
- = -
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 fnum 
fnum = 3.0
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> fnum 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 fnum 
fnum = 7.0006
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ funcDefList #exit ; } statementList statement 
statement -> ; ) expr ( return 
Stack: $ funcDefList #exit ; } statementList ; ) expr ( return 
return = return
( = (
expr -> expr1 arithExpr 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor 
factor -> factor1 id #pushId 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor1 id #pushId 
id = value
factor1 -> factor2 #checkId indiceList 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId indiceList 
indiceList -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 factor2 #checkId EPSILON 
factor2 -> #currentScope #exitScope EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 term1 #currentScope #exitScope EPSILON 
term1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ funcDefList #exit ; } statementList ; ) EPSILON 
) = )
; = ;
statementList -> EPSILON 
Stack: $ funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> EPSILON 
Stack: $ EPSILON 
Success: true
