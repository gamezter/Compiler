$ 
prog 
prog -> progBody classDeclList #newGlobal 
Stack: $ progBody classDeclList #newGlobal 
classDeclList -> classDeclList classDecl 
Stack: $ progBody classDeclList classDecl 
classDecl -> #exit ; } classBody { #newClass id #pushId class 
Stack: $ progBody classDeclList #exit ; } classBody { #newClass id #pushId class 
class = class
id = Foo1
{ = {
classBody -> EPSILON 
Stack: $ progBody classDeclList #exit ; } EPSILON 
} = }
; = ;
classDeclList -> classDeclList classDecl 
Stack: $ progBody classDeclList classDecl 
classDecl -> #exit ; } classBody { #newClass id #pushId class 
Stack: $ progBody classDeclList #exit ; } classBody { #newClass id #pushId class 
class = class
id = Foo2
{ = {
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> id 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId id 
id = unknowVarType
id = i
varOrFunc -> classBody ; #newVar arraySizeList 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList 
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar EPSILON 
; = ;
classBody -> EPSILON 
Stack: $ progBody classDeclList #exit ; } EPSILON 
} = }
; = ;
classDeclList -> classDeclList classDecl 
Stack: $ progBody classDeclList classDecl 
classDecl -> #exit ; } classBody { #newClass id #pushId class 
Stack: $ progBody classDeclList #exit ; } classBody { #newClass id #pushId class 
class = class
id = Foo3
{ = {
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> id 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId id 
id = unknownFuncType
id = func
varOrFunc -> funcDefList #exit ; funcBody ) fParams ( #newFunc 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc 
( = (
fParams -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> funcDefList funcDef 
Stack: $ progBody classDeclList #exit ; } funcDefList funcDef 
funcDef -> #exit ; funcBody funcHead 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody funcHead 
funcHead -> ) fParams ( #newFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId type #pushType 
type -> float 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId float 
float = float
id = func
( = (
fParams -> fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
type -> id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId id 
id = real
id = a
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> funcDefList funcDef 
Stack: $ progBody classDeclList #exit ; } funcDefList funcDef 
funcDef -> #exit ; funcBody funcHead 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody funcHead 
funcHead -> ) fParams ( #newFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc id #pushId int 
int = int
id = func
( = (
fParams -> fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
type -> id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId id 
id = real
id = a
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> fParamsTailList fParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList fParamsTail 
fParamsTail -> #changeToParam #newVar arraySizeList id #pushId type #pushType , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType , 
, = ,
type -> id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId id 
id = foo
id = b
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 3
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> funcBlock ; #newVar arraySizeList id #pushId int #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId int #pushType 
int = int
id = i
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 2
] = ]
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 4
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } EPSILON 
} = }
; = ;
funcDefList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } EPSILON 
} = }
; = ;
classDeclList -> classDeclList classDecl 
Stack: $ progBody classDeclList classDecl 
classDecl -> #exit ; } classBody { #newClass id #pushId class 
Stack: $ progBody classDeclList #exit ; } classBody { #newClass id #pushId class 
class = class
id = Foo4
{ = {
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> int 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId int 
int = int
id = array
varOrFunc -> classBody ; #newVar arraySizeList 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList 
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 4
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar EPSILON 
; = ;
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> float 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId float 
float = float
id = realNum
varOrFunc -> classBody ; #newVar arraySizeList 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar arraySizeList 
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } classBody ; #newVar EPSILON 
; = ;
classBody -> varOrFunc id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId type #pushType 
type -> float 
Stack: $ progBody classDeclList #exit ; } varOrFunc id #pushId float 
float = float
id = foo2
varOrFunc -> funcDefList #exit ; funcBody ) fParams ( #newFunc 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParams ( #newFunc 
( = (
fParams -> fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType 
type -> id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId id 
id = Unknown
id = a
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> fParamsTailList fParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList fParamsTail 
fParamsTail -> #changeToParam #newVar arraySizeList id #pushId type #pushType , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId type #pushType , 
, = ,
type -> id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList id #pushId id 
id = real
id = b
arraySizeList -> arraySizeList arraySize 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList arraySize 
arraySize -> ] inum #addDimension [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar arraySizeList ] inum #addDimension [ 
[ = [
inum = 3
] = ]
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) fParamsTailList #changeToParam #newVar EPSILON 
fParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; funcBody ) EPSILON 
) = )
funcBody -> } funcBlock { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock { 
{ = {
funcBlock -> varOrStatement id #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } varOrStatement id #pushType 
id = Foo
varOrStatement -> funcBlock ; #newVar arraySizeList id #pushId 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar arraySizeList id #pushId 
id = f
arraySizeList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } funcBlock ; #newVar EPSILON 
; = ;
funcBlock -> varOrStatement id #pushType 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } varOrStatement id #pushType 
id = f
varOrStatement -> statementList ; expr assignOp variable1 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> fnum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 fnum 
fnum = 9.0
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList id 
id = a
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = b
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = c
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList id 
id = b
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = c
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor * 
* = *
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor multOp 
multOp -> / 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor / 
/ = /
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = e
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList id 
id = c
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor not 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor not 
not = not
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = e
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor multOp 
multOp -> and 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor and 
and = and
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = f
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList id 
id = d
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> variable1 indiceList id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 indiceList id . 
. = .
id = a
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; expr1 EPSILON 
expr1 -> arithExpr relOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr relOp 
relOp -> <= 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr <= 
<= = <=
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term1 factor1 id 
id = g
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList statement 
statement -> ; statBlock else statBlock then ) expr ( if 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr ( if 
if = if
( = (
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 factor1 id 
id = isTrue
factor1 -> ) aParams ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParams ( 
( = (
aParams -> aParamsTailList expr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr 
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = p
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> aParamsTailList aParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList aParamsTail 
aParamsTail -> expr , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr , 
, = ,
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = q
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else statBlock then ) EPSILON 
) = )
then = then
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList id 
id = d
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 EPSILON 
variable1 -> variable1 indiceList id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList id . 
. = .
id = b
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor 
factor -> ) arithExpr ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor sign 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor sign 
sign -> - 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor - 
- = -
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 EPSILON 
expr1 -> arithExpr relOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr relOp 
relOp -> <> 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr <> 
<> = <>
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term1 factor1 id 
id = g
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList id 
id = e
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 EPSILON 
variable1 -> variable1 indiceList id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList id . 
. = .
id = d
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 EPSILON 
variable1 -> variable1 indiceList id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 indiceList id . 
. = .
id = c
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor1 id 
id = e
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> factor1 id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 factor1 id . 
. = .
id = param
factor1 -> ) aParams ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParams ( 
( = (
aParams -> aParamsTailList expr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr 
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = a
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> factor1 id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id . 
. = .
id = c
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> aParamsTailList aParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList aParamsTail 
aParamsTail -> expr , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr , 
, = ,
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = b
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } statementList ; EPSILON 
; = ;
statementList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; statBlock else } EPSILON 
} = }
else = else
statBlock -> } statementList { 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList { 
{ = {
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList id 
id = e
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor 
factor -> factor sign 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor sign 
sign -> - 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor - 
- = -
factor -> ) arithExpr ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 inum 
inum = 9
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term addOp 
addOp -> + 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = f
factor1 -> ) aParams ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParams ( 
( = (
aParams -> aParamsTailList expr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr 
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = a
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> aParamsTailList aParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList aParamsTail 
aParamsTail -> expr , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr , 
, = ,
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = b
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> aParamsTailList aParamsTail 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList aParamsTail 
aParamsTail -> expr , 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr , 
, = ,
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = c
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList EPSILON 
aParamsTailList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor not 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor not 
not = not
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = a
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> or 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term or 
or = or
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 inum 
inum = 8
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor * 
* = *
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = h
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> factor1 id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor1 id . 
. = .
id = i
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> factor1 id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor1 id . 
. = .
id = j
factor1 -> ) aParams ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) aParams ( 
( = (
aParams -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 EPSILON 
expr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; EPSILON 
; = ;
statementList -> statementList statement 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList statement 
statement -> ; assignStat 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; assignStat 
assignStat -> expr assignOp variable 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable 
variable -> variable1 indiceList id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList id 
id = f
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 inum 
inum = 1
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> variable1 indiceList id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList id . 
. = .
id = f
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor1 id 
id = a
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor multOp 
multOp -> and 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 factor and 
and = and
factor -> ) arithExpr ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = b
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor * 
* = *
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = c
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 EPSILON 
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor multOp 
multOp -> / 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor / 
/ = /
factor -> factor not 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor not 
not = not
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 term1 ) EPSILON 
) = )
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp variable1 EPSILON 
variable1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr assignOp EPSILON 
assignOp -> = 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr = 
= = =
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor sign 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor sign 
sign -> - 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor - 
- = -
factor -> fnum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 fnum 
fnum = 6.66
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 EPSILON 
arithExpr1 -> arithExpr1 term addOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term addOp 
addOp -> + 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term + 
+ = +
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor1 id 
id = a
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 1
term1 -> term1 factor multOp 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor multOp 
multOp -> * 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor * 
* = *
factor -> ) arithExpr ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr ( 
( = (
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id 
id = b
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList 
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 2
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> indiceList indice 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList indice 
indice -> ] arithExpr [ 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr [ 
[ = [
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 factor 
factor -> inum 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 inum 
inum = 3
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 indiceList ] EPSILON 
] = ]
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor2 EPSILON 
factor2 -> factor1 id . 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 factor1 id . 
. = .
id = c
factor1 -> ) aParams ( 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParams ( 
( = (
aParams -> aParamsTailList expr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr 
expr -> expr1 arithExpr 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr 
arithExpr -> arithExpr1 term 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term 
term -> term1 factor 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor 
factor -> factor1 id 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor1 id 
id = d
factor1 -> factor2 indiceList 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 indiceList 
indiceList -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 factor2 EPSILON 
factor2 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 term1 EPSILON 
term1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 arithExpr1 EPSILON 
arithExpr1 -> EPSILON 
Stack: $ progBody classDeclList #exit ; } funcDefList #exit ; } statementList ; } statementList ; expr1 arithExpr1 term1 factor2 indiceList ] arithExpr1 term1 ) arithExpr1 term1 ) aParamsTailList expr1 EPSILON 
expr1 -> EPSILON 